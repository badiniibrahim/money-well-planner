generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  clerkId          String   @unique
  email            String   @unique
  lastName         String
  firstName        String
  username         String?
  photo            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  stripeCustomerId String?

  // Relations
  budgets      Budget[]
  userSettings UserSettings[]
  budgetRule   BudgetRule[]
  expense      Expense[]
  debts        Debts[]
  savings      Savings[]
  pleasure     Pleasure[]
  dailyAdvice  DailyAdvice[]

  @@map("user")
}

model UserSettings {
  id        Int      @id @default(autoincrement())
  currency  String
  clerkId   String   @unique
  user      User     @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

model Budget {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime @default(now())
  amount    Float
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  clerkId   String
  user      User     @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  type      String   @default("budget")

  @@map("budget")
}

model Expense {
  id           Int       @id @default(autoincrement())
  name         String
  dueDate      DateTime?
  budgetAmount Float
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  clerkId      String
  type         String    @default("fixed")
  real         Float?
  user         User      @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)

  @@map("expense")
}

model BudgetRule {
  id                      Int    @id @default(autoincrement())
  needsPercentage         Float  @default(50)
  savingsPercentage       Float  @default(30)
  wantsPercentage         Float  @default(20)
  actualNeedsPercentage   Float  @default(0)
  actualSavingsPercentage Float  @default(0)
  actualWantsPercentage   Float  @default(0)
  clerkId                 String
  user                    User   @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)

  @@unique([clerkId])
  @@map("budget_rule")
}

model Debts {
  id              Int      @id @default(autoincrement())
  name            String
  budgetAmount    Float
  duAmount        Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  clerkId         String
  remainsToBePaid Float
  type            String   @default("debts")
  real            Float?

  user User @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)

  @@map("debts")
}

model Savings {
  id           Int      @id @default(autoincrement())
  name         String
  budgetAmount Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  clerkId      String
  type         String   @default("saving")

  user User   @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  real Float?

  @@map("savings")
}

model Pleasure {
  id           Int      @id @default(autoincrement())
  name         String
  budgetAmount Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  clerkId      String
  type         String   @default("pleasure")
  real         Float?

  user User @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)

  @@map("pleasure")
}

model DailyAdvice {
  id        Int      @id @default(autoincrement())
  advice    String
  createdAt DateTime @default(now())
  clerkId   String   @unique

  user User @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)

  @@map("daily_advice")
}
